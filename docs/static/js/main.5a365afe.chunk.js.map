{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GiftSearchApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GiftSearchApp","categories","ReactDOM","render","document","getElementById"],"mappings":"uLAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAqBA,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAS,IACpBP,GAAc,SAAAQ,GAAI,OAAMN,GAAN,mBAAqBM,OACvCL,EAAc,MASlB,SACI,uBACIM,KAAK,OACLC,MAAQR,EACRS,SAvBc,SAACN,GAEvBF,EAAcE,EAAEO,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCDPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCFJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SACtB,ECHwB,SAACA,GAGzB,MAA0Bb,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAXAC,qBAAW,WACPxB,EAAQC,GACHwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAEGqB,EDjB2BK,CAAa1B,GAAjCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAEtB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBACb,qBAAKA,UAAU,WAAf,SAEQH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAESA,GADCA,EAAIC,aEZzBgB,EAAgB,WAEzB,MAAqCxC,mBAAS,CAAC,WAA/C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAEA,OACI,qCACI,+CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQ0C,EAAWnB,KAAK,SAACT,GAAD,OACZ,cAAC,EAAD,CAEIA,SAAaA,GADLA,Y,MCZpC6B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.5a365afe.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    // crear una fumcion y que reciba evento a\r\n    const handleInputChange = (e) =>{\r\n        //console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n    // el primer argumento de los onSubmit o onChange es el event y ese el \r\n    // que estamos atrapando con el metodo\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        if (inputValue.length > 2) {\r\n            setCategories(cats => [ inputValue, ...cats, ]); \r\n            setInputValue('');   \r\n            //console.log('Entro!!');        \r\n        }\r\n        // setCategories(cats => [ inputValue, ...cats, ]); \r\n        // setInputValue('');  \r\n        //console.log('lng: '+inputValue.length);\r\n    }\r\n\r\n    return (        \r\n        <form onSubmit={ handleSubmit }>\r\n            <input            \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>      \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\nexport const getGifs = async(category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=6UpOT36kZmHRZctHIqj1fhfIBb8vs5eo`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n  \r\n    return gifs;\r\n}","import React from 'react'\r\n//Aqui recibimos una imagen\r\nexport const GifGridItem = ( {title, url} ) => {\r\n    //console.log(id, title, url);\r\n    return (\r\n        <div className='card animate__animated animate__bounce'>\r\n            <img src={ url } alt={ title }/>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    const { data: images, loading } = useFetchGifs(category);\r\n  \r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'>{ category }</h3>\r\n            { loading && <p className='animate__animated animate__flash'>Loading...</p> }\r\n            <div className='cardGrid'>                \r\n                {\r\n                    images.map((img) => (\r\n                        <GifGridItem  \r\n                            key={ img.id }\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }                    \r\n            </div> \r\n         </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    //snipet us y tab\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    //ojo los effectos no pueden ser Async por que son sincronos\r\n    // pero el cuerpo de un efecto si\r\n    useEffect( ()=>{\r\n        getGifs(category)\r\n            .then( imgs => {\r\n\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            });\r\n    }, [category]);  // si la cat cambia vuelve a ejecutar todo eso\r\n\r\n    return state; // { data: [], loading: true }\r\n    \r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GiftSearchApp = () => {\r\n    \r\n    const [categories, setCategories] =  useState(['Naruto']);                          \r\n   \r\n    return (\r\n        <>\r\n            <h2>GiftSearchApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr/>            \r\n            <ol>\r\n                {\r\n                    categories.map( (category) =>(\r\n                        <GifGrid \r\n                            key = { category }\r\n                            category = { category }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n            \r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GiftSearchApp } from './GiftSearchApp';\nimport './index.css';\n\nReactDOM.render(\n  \n    <GiftSearchApp />,\n  \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}